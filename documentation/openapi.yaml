openapi: "3.0.0"
info:
  description: "This is the API spec for the International Project 06 application. You can find all the API calls that are
  available right here."
  version: "0.5"
  title: "International Project 06"
tags:
  - name: "User"
    description: "Everything that has to do with users"
  - name: "Game"
    description: "API calls that have to do with games"
paths:
  /user:
    get:
      description: "Retrieve the currently logged in user's information."
      tags:
        - "User"
      responses:
        '200':
          description: "Retrieved user info."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchedUser"
    patch:
      description: "Modify the user's profile."
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: "OK, modified user settings"
        '404':
          description: "User not found: unable to change settings"
  /users/login:
    get:
      description: "API call to login using your discord auth code."
      tags:
        - "User"
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK, logged in user."
        '400':
          description: "Bad request"
        '404':
          description: "You are not registered yet."
  /users/logout:
    post:
      description: "API call to log out."
      tags:
        - "User"
      responses:
        '200':
          description: "Log out from your account."
        '400':
          description: "There is no logged-in user."
  /users/authenticated:
    get:
      description: "Check if you are currently logged in."
      tags:
        - "User"
      responses:
        '200':
          description: "Boolean to show that the user is logged in or not"
          content:
            application/json:
              schema:
                type: boolean
  /users/matchSuggestion:
    get:
      description: "Retrieve a possible match to swipe."
      tags:
        - "User"
      parameters:
        - in: query
          name: games
          required: false
          schema:
            type: array
            items:
              type: integer
            description: "Games that are on your whitelist."
      responses:
        '200':
          description: "Retrieved user info."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /users/matchSuggestion/{suggested_user_id}:
    patch:
      description: "API call to indicate whether you accept or reject a user."
      tags:
        - "User"
      parameters:
        - in: path
          name: suggested_user_id
          required: true
          schema:
            $ref: "#/components/schemas/user_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accept:
                  type: boolean
      responses:
        '200':
          description: "OK"
  /users/matches:
    get:
      description: "Retrieve the names and profile pictures of all your user's matches."
      tags:
        - "User"
      responses:
        '200':
          description: "Retrieved a list of all the user's matches."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchedUser"
  /users/matches/{user_id}:
    get:
      description: "Retrieve all information about one of your matches."
      tags:
        - "User"
      parameters:
        - in: path
          name: user_id
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      responses:
        '200':
          description: "Retrieve the data of one of your matches."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchedUser"
        '404':
          description: "Match not found."
  /users/games/{id}:
    post:
      description: "Add a game to the user's games."
      tags:
        - "User"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hours_played:
                  type: integer
                rank:
                  type: string
      responses:
        '200':
          description: "OK, added game to the user"
    delete:
      description: "Remove a game from the user's games."
      tags:
        - "User"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: "OK, deleted game from the user's games."
  /games/{game_id}:
    get:
      description: "Retrieve a game with a specific ID"
      tags:
        - "Game"
      parameters:
        - in: path
          name: game_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: "OK, returns game info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
components:
  schemas:
    access_token:
      type: string
      example: "k04TitS5bT5AUbv3vgpdcyIHANIkPu"
    refresh_token:
      type: string
      example: "wOCLJLdkQcxeSmR71TqxlZjWHk6EWO"
    user_id:
      type: string
      example: "379658587221524492"
    username:
      type: string
      example: "Ritchwood"
    description:
      type: string
      example: "Looking for some gamers to play Valorant with!"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/user_id"
        username:
          $ref: "#/components/schemas/username"
        avatar_path:
          type: string
        description:
          $ref: "#/components/schemas/description"
        games:
          type: array
          items:
            $ref:  "#/components/schemas/UserGame"
    MatchedUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            discord_tag:
              type: string
            matched_at:
              type: string
    Game:
      type: object
      properties:
        game_id:
          type: integer
        name:
          type: string
        genre:
          type: array
          items:
            type: string
        image_path:
          type: string
    UserGame:
      allOf:
        - $ref: "#/components/schemas/Game"
        - type: object
          properties:
            hours_played:
              type: integer
            rank:
              type: string
            blacklist:
              type: boolean